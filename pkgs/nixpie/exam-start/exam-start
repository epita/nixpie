#!/usr/bin/env python3
import sh

from getpass import getuser
from termcolor import colored
from sys import exit, stderr
from pathlib import Path
from requests import Session
from requests_gssapi import HTTPSPNEGOAuth, exceptions as spnego_exceptions

EXAM_GIT_SERVER = "git.exam.forge.epita.fr"


class User:
    class AuthFailed(RuntimeError):
        pass

    ATTR_MAP = {
        "firstname": "first_name",
        "lastname": "last_name",
        "email": "email",
    }

    USERINFO_ENDPOINT = "https://cri.epita.fr/api/v2/users/me/"
    SSH_KNOWN_HOSTS_PATH = Path("~/.ssh/known_hosts").expanduser()

    def __init__(self, login, session):
        self.login = login
        try:
            r = session.get(self.USERINFO_ENDPOINT)
        except spnego_exceptions.SPNEGOExchangeError as e:
            raise self.AuthFailed(str(e))

        if r.status_code != 200:
            raise self.AuthFailed("status_code={r.status_code}: {r.text}")

        data = r.json()

        if data.get("login") != login:
            raise self.AuthFailed(
                f"login mismatch: expected '{login}' got '{data.get('login')}'"
            )

        for attr, key in self.ATTR_MAP.items():
            setattr(self, attr, data.get(key))

    def __str__(self):
        return self.login

    def get_full_name(self):
        return f"{self.firstname} {self.lastname}"

    def configure_git(self):
        try:
            sh.git("config", "--global", "user.email", self.email)
            sh.git("config", "--global", "user.name", self.get_full_name())
            sh.git("config", "--global", "push.default", "simple")

            self.SSH_KNOWN_HOSTS_PATH.parent.mkdir(parents=True, exist_ok=True)
            with open(self.SSH_KNOWN_HOSTS_PATH, "w+") as f:
                sh.Command("ssh-keyscan")(EXAM_GIT_SERVER, _out=f)
        except sh.ErrorReturnCode:
            print(
                colored(
                    "Error while configuring git",
                    "red",
                    attr=["bold"],
                ),
            )

    def data(self):
        return "\n".join(
            (
                f"login : {self.login}",
                f"firstname: {self.firstname}",
                f"lastname: {self.lastname}",
                f"email: {self.email}",
            ),
        )


if __name__ == "__main__":
    cri_login = getuser()
    if cri_login in ["epita", "root"]:
        print(
            colored(f"{cri_login} is not a student", "red", attrs=["bold"]),
            file=stderr,
        )
        exit(1)

    session = Session()
    session.auth = HTTPSPNEGOAuth(opportunistic_auth=True)

    try:
        user = User(cri_login, session)
    except User.AuthFailed as e:
        print(
            colored(f"Login failed: {e}", "red", attrs=["bold"]),
            file=stderr,
        )
        exit(1)

    print(user.data())
    user.configure_git()
    print(colored("Exam is ready", "green", attrs=["bold"]))
