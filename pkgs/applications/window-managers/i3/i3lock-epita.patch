diff --git a/i3lock.1 b/i3lock.1
index f7c90ef..3f7b256 100644
--- a/i3lock.1
+++ b/i3lock.1
@@ -143,8 +143,8 @@ put a laptop to sleep and bounce on resume or if you happen to wake up
 your computer with the enter key.
 
 .TP
-.B \-f, \-\-show-failed-attempts
-Show the number of failed attempts, if any.
+.B \-f, \-\-hide-failed-attempts
+Hide the number of failed attempts, if any.
 
 .TP
 .B \-k, \-\-show-keyboard-layout
diff --git a/i3lock.c b/i3lock.c
index bcd6976..279fa65 100644
--- a/i3lock.c
+++ b/i3lock.c
@@ -47,6 +47,9 @@
 #include "randr.h"
 #include "dpi.h"
 
+/* DBus */
+#include "sd-bus.h"
+
 #define TSTAMP_N_SECS(n) (n * 1.0)
 #define TSTAMP_N_MINS(n) (60 * TSTAMP_N_SECS(n))
 #define START_TIMER(timer_obj, timeout, callback) \
@@ -57,7 +60,7 @@
 typedef void (*ev_callback_t)(EV_P_ ev_timer *w, int revents);
 static void input_done(void);
 
-char color[7] = "a3a3a3";
+char color[7] = "000000";
 uint32_t last_resolution[2];
 xcb_window_t win;
 static xcb_cursor_t cursor;
@@ -80,7 +83,7 @@ static struct ev_timer *discard_passwd_timeout;
 extern unlock_state_t unlock_state;
 extern auth_state_t auth_state;
 int failed_attempts = 0;
-bool show_failed_attempts = false;
+bool show_failed_attempts = true;
 bool show_keyboard_layout = false;
 bool retry_verification = false;
 
@@ -98,6 +101,20 @@ bool tile = false;
 bool ignore_empty_password = false;
 bool skip_repeated_empty_password = false;
 
+time_t lock_time;
+time_t curtime;
+time_t locked_time;
+static struct ev_periodic *time_status_tick;
+bool dbus_failed = false;
+
+/* Buf for the login*/
+char login_buf[64];
+char *login = login_buf;
+
+/* Session Id */
+char session_id_buf[16];
+char *session_id = session_id_buf;
+
 /* isutf, u8_dec © 2005 Jeff Bezanson, public domain */
 #define isutf(c) (((c)&0xC0) != 0x80)
 
@@ -109,6 +126,16 @@ static void u8_dec(char *s, int *i) {
     (void)(isutf(s[--(*i)]) || isutf(s[--(*i)]) || isutf(s[--(*i)]) || --(*i));
 }
 
+/*
+ * Get the login of the user in order to display it while drawing the screen
+ *
+ */
+static char *get_login(void) {
+    uid_t uid = getuid();
+    struct passwd *pwd = getpwuid(uid);
+    return pwd ? pwd->pw_name : NULL;
+}
+
 /*
  * Loads the XKB keymap from the X11 server and feeds it to xkbcommon.
  * Necessary so that we can properly let xkbcommon track the keyboard state and
@@ -357,10 +384,12 @@ static void handle_key_press(xcb_key_press_event_t *event) {
     char buffer[128];
     int n;
     bool ctrl;
+    bool mod;
     bool composed = false;
 
     ksym = xkb_state_key_get_one_sym(xkb_state, event->detail);
     ctrl = xkb_state_mod_name_is_active(xkb_state, XKB_MOD_NAME_CTRL, XKB_STATE_MODS_DEPRESSED);
+    mod = xkb_state_mod_name_is_active(xkb_state, XKB_MOD_NAME_LOGO, XKB_STATE_MODS_DEPRESSED);
 
     /* The buffer will be null-terminated, so n >= 2 for 1 actual character. */
     memset(buffer, '\0', sizeof(buffer));
@@ -388,6 +417,17 @@ static void handle_key_press(xcb_key_press_event_t *event) {
         n = xkb_keysym_to_utf8(ksym, buffer, sizeof(buffer));
     }
 
+    switch (ksym) {
+        case XKB_KEY_E:
+            if (mod) {
+                time_t curtime = time(NULL);
+                time_t locked_time = difftime(curtime, lock_time) / 60;
+                if (locked_time >= AUTHORIZED_LOCK_TIME)
+                    terminate_current_session();
+            }
+            break;
+    }
+
     switch (ksym) {
         case XKB_KEY_j:
         case XKB_KEY_m:
@@ -451,11 +491,11 @@ static void handle_key_press(xcb_key_press_event_t *event) {
                 unlock_state = STATE_NOTHING_TO_DELETE;
                 redraw_screen();
                 return;
-            }
-
+            } else {
             /* decrement input_position to point to the previous glyph */
             u8_dec(password, &input_position);
             password[input_position] = '\0';
+            }
 
             /* Hide the unlock indicator after a bit if the password buffer is
              * empty. */
@@ -971,6 +1011,34 @@ static void raise_loop(xcb_window_t window) {
     }
 }
 
+void identify_and_set_lock_status(void) {
+    if (!dbus_failed)
+    {
+        enum status new_status = LOCKED;
+        time_t curtime = time(NULL);
+        time_t locked_time = difftime(curtime, lock_time) / 60;
+        if (locked_time >= AUTHORIZED_LOCK_TIME)
+            new_status = LOCKED_OVERTIME;
+        dbus_failed = set_lock_status(session_id, new_status);
+    }
+}
+
+static void time_status_cb(struct ev_loop *loop, ev_periodic *w, int revents) {
+    identify_and_set_lock_status();
+}
+
+void start_time_status_tick(struct ev_loop* main_loop) {
+    if (time_status_tick) {
+        ev_periodic_set(time_status_tick, 1.0, 15., 0);
+        ev_periodic_again(main_loop, time_status_tick);
+    } else {
+        if (!(time_status_tick = calloc(sizeof(struct ev_periodic), 1)))
+            return;
+        ev_periodic_init(time_status_tick, time_status_cb, 1.0, 15., 0);
+        ev_periodic_start(main_loop, time_status_tick);
+    }
+}
+
 int main(int argc, char *argv[]) {
     struct passwd *pw;
     char *username;
@@ -998,7 +1066,7 @@ int main(int argc, char *argv[]) {
         {"tiling", no_argument, NULL, 't'},
         {"ignore-empty-password", no_argument, NULL, 'e'},
         {"inactivity-timeout", required_argument, NULL, 'I'},
-        {"show-failed-attempts", no_argument, NULL, 'f'},
+        {"hide-failed-attempts", no_argument, NULL, 'f'},
         {"show-keyboard-layout", no_argument, NULL, 'k'},
         {NULL, no_argument, NULL, 0}};
 
@@ -1040,7 +1108,7 @@ int main(int argc, char *argv[]) {
                 break;
             }
             case 'u':
-                unlock_indicator = false;
+                errx(EXIT_FAILURE, "Unlock indicator cannot be disabled on the PIE");
                 break;
             case 'i':
                 image_path = strdup(optarg);
@@ -1067,7 +1135,7 @@ int main(int argc, char *argv[]) {
                     image_raw_format = strdup(optarg);
                 break;
             case 'f':
-                show_failed_attempts = true;
+                show_failed_attempts = false;
                 break;
             case 'k':
                 show_keyboard_layout = true;
@@ -1082,6 +1150,12 @@ int main(int argc, char *argv[]) {
      * the unlock indicator upon keypresses. */
     srand(time(NULL));
 
+    /* We need to save the current time in order to display the time when
+     * the computer was locked. Since this could lead to our PRNG seed being
+     * visible to the user, we should make sure that we're not using rand()
+     * for anything important (spoiler: we aren't). */
+    lock_time = time(NULL);
+
 #ifndef __OpenBSD__
     /* Initialize PAM */
     if ((ret = pam_start("i3lock", username, &conv, &pam_handle)) != PAM_SUCCESS)
@@ -1159,6 +1233,7 @@ int main(int argc, char *argv[]) {
         locale = "C";
     }
 
+
     load_compose_table(locale);
 
     screen = xcb_setup_roots_iterator(xcb_get_setup(conn)).data;
@@ -1242,11 +1317,24 @@ int main(int argc, char *argv[]) {
      * keyboard. */
     (void)load_keymap();
 
+    /* Fill the buffer with the user login */
+    login = get_login();
+
+    /* Fill the buffer with the current session_id */
+    dbus_failed = get_session_id(session_id);
+
+    if (!dbus_failed)
+        identify_and_set_lock_status();
+
     /* Initialize the libev event loop. */
     main_loop = EV_DEFAULT;
     if (main_loop == NULL)
         errx(EXIT_FAILURE, "Could not initialize libev. Bad LIBEV_FLAGS?");
 
+    curtime = time(NULL);
+    locked_time = difftime(curtime, lock_time) / 60;
+    printf("%ld\n", locked_time);
+
     /* Explicitly call the screen redraw in case "locking…" message was displayed */
     auth_state = STATE_AUTH_IDLE;
     redraw_screen();
@@ -1264,10 +1352,20 @@ int main(int argc, char *argv[]) {
     ev_prepare_init(xcb_prepare, xcb_prepare_cb);
     ev_prepare_start(main_loop, xcb_prepare);
 
+    redraw_screen();
+    unlock_state = STATE_KEY_PRESSED;
+
+    struct ev_timer *timeout = NULL;
+    START_TIMER(timeout, TSTAMP_N_SECS(0.25), redraw_timeout);
+    STOP_TIMER(clear_indicator_timeout);
+
     /* Invoke the event callback once to catch all the events which were
      * received up until now. ev will only pick up new events (when the X11
      * file descriptor becomes readable). */
+
     ev_invoke(main_loop, xcb_check, 0);
+    start_time_status_tick(main_loop);
+    start_time_redraw_tick(main_loop);
     ev_loop(main_loop, 0);
 
 #ifndef __OpenBSD__
@@ -1287,5 +1385,7 @@ int main(int argc, char *argv[]) {
     set_focused_window(conn, screen->root, stolen_focus);
     xcb_aux_sync(conn);
 
+    if (!dbus_failed)
+        set_lock_status(session_id, UNLOCKED);
     return 0;
 }
diff --git a/include/i3lock.h b/include/i3lock.h
index 1858325..acc56d1 100644
--- a/include/i3lock.h
+++ b/include/i3lock.h
@@ -12,4 +12,7 @@
         }                                                          \
     } while (0)
 
+/* This time must be in minutes */
+#define AUTHORIZED_LOCK_TIME 60
+
 #endif
diff --git a/include/unlock_indicator.h b/include/unlock_indicator.h
index 581d028..9ce1957 100644
--- a/include/unlock_indicator.h
+++ b/include/unlock_indicator.h
@@ -26,4 +26,7 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t* resolution);
 void redraw_screen(void);
 void clear_indicator(void);
 
+struct ev_loop;
+void start_time_redraw_tick(struct ev_loop* main_loop);
+
 #endif
diff --git a/meson.build b/meson.build
index b5a6e6d..5c7c3b7 100644
--- a/meson.build
+++ b/meson.build
@@ -83,6 +83,7 @@ xcb_util_xrm_dep = dependency('xcb-xrm', method: 'pkg-config')
 xkbcommon_dep = dependency('xkbcommon', method: 'pkg-config')
 xkbcommon_x11_dep = dependency('xkbcommon-x11', method: 'pkg-config')
 cairo_dep = dependency('cairo', version: '>=1.14.4', method: 'pkg-config')
+systemd_dep = dependency('libsystemd', version: '>=221', method: 'pkg-config')
 
 i3lock_srcs = [
   'dpi.c',
@@ -90,6 +91,7 @@ i3lock_srcs = [
   'randr.c',
   'unlock_indicator.c',
   'xcb.c',
+  'sd-bus.c',
 ]
 
 ev_dep = cc.find_library('ev')
@@ -103,6 +105,7 @@ i3lock_deps = [
   ev_dep,
   config_h,
   cairo_dep,
+  systemd_dep,
   xcb_dep,
   xcb_xkb_dep,
   xcb_xinerama_dep,
diff --git a/sd-bus.c b/sd-bus.c
new file mode 100644
index 0000000..54ea11f
--- /dev/null
+++ b/sd-bus.c
@@ -0,0 +1,159 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <systemd/sd-bus.h>
+
+#include "sd-bus.h"
+
+int terminate_current_session(void) {
+    sd_bus_error error = SD_BUS_ERROR_NULL;
+    sd_bus_message *m = NULL;
+    sd_bus *bus = NULL;
+    int r;
+
+    /* Connect to the system bus */
+    r = sd_bus_open_system(&bus);
+    if (r < 0) {
+        fprintf(stderr, "Failed to connect to system bus: %s\n", strerror(-r));
+        goto finish;
+    }
+
+    /* Issue the method call and store the respons message in m */
+    r = sd_bus_call_method(bus,
+            "org.freedesktop.login1",               /* service to contact */
+            "/org/freedesktop/login1/session/self", /* object path */
+            "org.freedesktop.login1.Session",       /* interface name */
+            "Terminate",                            /* method name */
+            &error,                                 /* object to return error in */
+            &m,                                     /* return message on success */
+            ""                                      /* input signature */
+            );
+    if (r < 0) {
+        fprintf(stderr, "Failed to issue method call: %s\n", error.message);
+    }
+
+finish:
+    sd_bus_error_free(&error);
+    sd_bus_message_unref(m);
+    sd_bus_unref(bus);
+
+    return r < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
+}
+
+int get_session_id(char *session_id)
+{
+    sd_bus_error error = SD_BUS_ERROR_NULL;
+    sd_bus_message *m = NULL;
+    sd_bus *bus = NULL;
+    int r;
+    const char *id;
+
+    /* Connect to the system bus */
+    r = sd_bus_open_system(&bus);
+    if (r < 0) {
+        fprintf(stderr, "Failed to connect to system bus: %s\n", strerror(-r));
+        goto finish;
+    }
+
+    /* Issue the method call and store the respons message in m */
+    r = sd_bus_call_method(bus,
+            "org.freedesktop.login1",                       /* service to contact */
+            "/org/freedesktop/login1/session/self",         /* object path */
+            "org.freedesktop.DBus.Properties",              /* interface name */
+            "Get",                                          /* method name */
+            &error,                                         /* object to return error in */
+            &m,                                             /* return message on success */
+            "ss",                                           /* input signature */
+            "org.freedesktop.login1.Session",               /* first argument */
+            "Id");                                          /* second argument */
+    if (r < 0) {
+        fprintf(stderr, "Failed to issue method call: %s\n", error.message);
+        goto finish;
+    }
+
+    // We need to open the variant container
+    char type;
+    r = sd_bus_message_peek_type(m, &type, &id);
+    if (r < 0) {
+        fprintf(stderr, "Failed to peek the type container: %s\n", strerror(-r));
+        goto finish;
+    }
+    r = sd_bus_message_enter_container(m, SD_BUS_TYPE_VARIANT, id);
+    if (r < 0) {
+        fprintf(stderr, "Failed to enter in the container: %s\n", strerror(-r));
+        goto finish;
+    }
+    r = sd_bus_message_read_basic(m, SD_BUS_TYPE_STRING, &id);
+    if (r < 0) {
+        fprintf(stderr, "Failed to parse response message: %s\n", strerror(-r));
+        goto finish;
+    }
+    if (id == NULL) {
+        fprintf(stderr, "Failed to get current session id: %s\n", strerror(-r));
+        goto finish;
+    }
+    size_t len_id = strlen(id);
+    if (len_id == 0) {
+        fprintf(stderr, "Failed to get current session id: %s\n", strerror(-r));
+        goto finish;
+    }
+    strcpy(session_id, id);
+
+finish:
+    sd_bus_error_free(&error);
+    sd_bus_message_unref(m);
+    sd_bus_unref(bus);
+
+    return r < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
+}
+
+static int set_lock_status_dbus(char *session_id, const char *method_name) {
+    sd_bus_error error = SD_BUS_ERROR_NULL;
+    sd_bus_message *m = NULL;
+    sd_bus *bus = NULL;
+    int r;
+
+    /* Connect to the system bus */
+    r = sd_bus_open_system(&bus);
+    if (r < 0) {
+        fprintf(stderr, "Failed to connect to system bus: %s\n", strerror(-r));
+        goto finish;
+    }
+
+    /* Issue the method call and store the respons message in m */
+    r = sd_bus_call_method(bus,
+            "org.cri.MachineState",                 /* service to contact */
+            "/org/cri/MachineState",                /* object path */
+            "org.cri.MachineState",                 /* interface name */
+            method_name,                          /* method name */
+            &error,                                 /* object to return error in */
+            &m,                                     /* return message on success */
+            "s",                                    /* input signature */
+            session_id                              /* first argument */
+            );
+    if (r < 0) {
+        fprintf(stderr, "Failed to issue method call: %s\n", error.message);
+    }
+
+finish:
+    sd_bus_error_free(&error);
+    sd_bus_message_unref(m);
+    sd_bus_unref(bus);
+
+    return r < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
+}
+
+int set_lock_status(char *session_id, enum status new_status) {
+    const char *status[STATUS_SIZE] =
+    {
+        "UnlockSession",
+        "LockSession",
+        "OvertimeLockSession"
+    };
+    if (new_status < UNLOCKED || new_status > LOCKED_OVERTIME)
+    {
+        printf("Wrong status.\n");
+        return 0;
+    }
+    return set_lock_status_dbus(session_id, status[new_status]);
+}
diff --git a/sd-bus.h b/sd-bus.h
new file mode 100644
index 0000000..1754427
--- /dev/null
+++ b/sd-bus.h
@@ -0,0 +1,18 @@
+#ifndef I3_LOCK_SD_BUS_H
+#define I3_LOCK_SD_BUS_H
+
+enum status {
+    UNLOCKED = 0,
+    LOCKED,
+    LOCKED_OVERTIME
+};
+
+#define STATUS_SIZE 3
+
+int terminate_current_session(void);
+
+int get_session_id(char *session_id);
+
+int set_lock_status(char *session_id, unsigned lock_status);
+
+#endif
diff --git a/unlock_indicator.c b/unlock_indicator.c
index a50b52f..bc9ffa3 100644
--- a/unlock_indicator.c
+++ b/unlock_indicator.c
@@ -16,6 +16,9 @@
 #include <ev.h>
 #include <cairo.h>
 #include <cairo/cairo-xcb.h>
+#include <unistd.h>
+#include <time.h>
+#include <pwd.h>
 
 #include "i3lock.h"
 #include "xcb.h"
@@ -27,6 +30,8 @@
 #define BUTTON_SPACE (BUTTON_RADIUS + 5)
 #define BUTTON_CENTER (BUTTON_RADIUS + 5)
 #define BUTTON_DIAMETER (2 * BUTTON_SPACE)
+#define INFO_MAXLENGTH 100
+
 
 /*******************************************************************************
  * Variables defined in i3lock.c.
@@ -70,6 +75,15 @@ extern int failed_attempts;
 extern struct xkb_keymap *xkb_keymap;
 extern struct xkb_state *xkb_state;
 
+/* When was the computer locked. */
+extern time_t lock_time;
+
+/* tick for timer */
+static struct ev_periodic *time_redraw_tick;
+
+/* Login */
+extern char *login;
+
 /*******************************************************************************
  * Variables defined in xcb.c.
  ******************************************************************************/
@@ -218,8 +232,12 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
         }
     }
 
-    if (unlock_indicator &&
-        (unlock_state >= STATE_KEY_PRESSED || auth_state > STATE_AUTH_IDLE)) {
+    /* Compute the locked_time */
+    time_t curtime = time(NULL);
+    time_t locked_time = difftime(curtime, lock_time) / 60;
+
+    // We always want the circle to be displayed
+    if (unlock_indicator) {
         cairo_scale(ctx, scaling_factor, scaling_factor);
         /* Draw a (centered) circle with transparent background. */
         cairo_set_line_width(ctx, 10.0);
@@ -249,6 +267,10 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
                 cairo_set_source_rgba(ctx, 0, 0, 0, 0.75);
                 break;
         }
+        /* Special color for unauthorized */
+        if (locked_time >= AUTHORIZED_LOCK_TIME)
+            cairo_set_source_rgba(ctx, 250.0 / 255, 0, 0, 0.75);
+
         cairo_fill_preserve(ctx);
 
         bool use_dark_text = true;
@@ -268,10 +290,13 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
                     break;
                 }
 
-                cairo_set_source_rgb(ctx, 51.0 / 255, 125.0 / 255, 0);
+                cairo_set_source_rgb(ctx, 160.0 / 255, 160.0 / 255, 160.0 / 255);
                 use_dark_text = false;
                 break;
         }
+        if (locked_time >= AUTHORIZED_LOCK_TIME)
+            cairo_set_source_rgb(ctx, 125.0 / 255, 51.0 / 255, 0);
+
         cairo_stroke(ctx);
 
         /* Draw an inner seperator line. */
@@ -289,12 +314,15 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
 
         /* Display a (centered) text of the current PAM state. */
         char *text = NULL;
-        /* We don't want to show more than a 3-digit number. */
-        char buf[4];
+        char buf[INFO_MAXLENGTH];
+        memset(buf, 0, sizeof(buf));
 
         cairo_set_source_rgb(ctx, 0, 0, 0);
         cairo_select_font_face(ctx, "sans-serif", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
         cairo_set_font_size(ctx, 28.0);
+
+        int has_special_state = true;
+
         switch (auth_state) {
             case STATE_AUTH_VERIFY:
                 text = "Verifying…";
@@ -311,31 +339,50 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
             default:
                 if (unlock_state == STATE_NOTHING_TO_DELETE) {
                     text = "No input";
+                    break;
                 }
                 if (show_failed_attempts && failed_attempts > 0) {
-                    if (failed_attempts > 999) {
-                        text = "> 999";
+                    if (failed_attempts == 1) {
+                        text = "1 failed attempt";
+                    } else if (failed_attempts > 999) {
+                        text = "> 999 failed attempts";
                     } else {
-                        snprintf(buf, sizeof(buf), "%d", failed_attempts);
+                        snprintf(buf, INFO_MAXLENGTH - 1, "%i failed attempts", failed_attempts);
                         text = buf;
                     }
                     cairo_set_source_rgb(ctx, 1, 0, 0);
-                    cairo_set_font_size(ctx, 32.0);
+                    cairo_set_font_size(ctx, 12.0);
                 }
+                has_special_state = false;
                 break;
         }
 
         if (text) {
-            display_button_text(ctx, text, 0., use_dark_text);
+            display_button_text(ctx, text, has_special_state ? 0. : 56., use_dark_text);
         }
 
-        if (modifier_string != NULL) {
+        if (text == NULL || !has_special_state) {
+            /* Lock time (above) */
             cairo_set_font_size(ctx, 14.0);
-            display_button_text(ctx, modifier_string, 28., use_dark_text);
+            display_button_text(ctx, "Locked for", -28., use_dark_text);
+
+            /* Time (centered) */
+            char timebuf[INFO_MAXLENGTH];
+            memset(timebuf, 0, sizeof(timebuf));
+
+            /* set time display */
+            snprintf(timebuf, INFO_MAXLENGTH - 1, "%.2lu:%.2lu", locked_time / 60, locked_time % 60);
+            cairo_set_font_size(ctx, 32.0);
+            display_button_text(ctx, timebuf, 0., use_dark_text);
+        }
+
+        if (login != NULL) {
+            cairo_set_font_size(ctx, 14.0);
+            display_button_text(ctx, login, 28., use_dark_text);
         }
         if (show_keyboard_layout && layout_string != NULL) {
             cairo_set_font_size(ctx, 14.0);
-            display_button_text(ctx, layout_string, -28., use_dark_text);
+            display_button_text(ctx, layout_string, -56., use_dark_text);
         }
 
         /* After the user pressed any valid key or the backspace key, we
@@ -353,10 +400,10 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
                       highlight_start + (M_PI / 3.0));
             if (unlock_state == STATE_KEY_ACTIVE) {
                 /* For normal keys, we use a lighter green. */
-                cairo_set_source_rgb(ctx, 51.0 / 255, 219.0 / 255, 0);
+                cairo_set_source_rgb(ctx, 1, 1, 1);
             } else {
-                /* For backspace, we use red. */
-                cairo_set_source_rgb(ctx, 219.0 / 255, 51.0 / 255, 0);
+                /* For backspace, we use black. */
+                cairo_set_source_rgb(ctx, 0, 0, 0);
             }
             cairo_stroke(ctx);
 
@@ -400,6 +447,101 @@ void draw_image(xcb_pixmap_t bg_pixmap, uint32_t *resolution) {
         cairo_fill(xcb_ctx);
     }
 
+    /* Display current modifier */
+    if (auth_state == STATE_AUTH_WRONG && modifier_string != NULL) {
+        int h = 50;
+        int w = 300;
+        int h_scaled = ceil(scaling_factor * h);
+        int w_scaled = ceil(scaling_factor * w);
+        cairo_surface_t *output_modifier = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, w_scaled, h_scaled);
+        cairo_t *ctx_modifier = cairo_create(output_modifier);
+        cairo_scale(ctx_modifier, scaling_factor, scaling_factor);
+
+        cairo_text_extents_t extents;
+        cairo_set_font_size(ctx_modifier, 14.0);
+
+        cairo_text_extents(ctx_modifier, modifier_string, &extents);
+        int x = w / 2 - ((extents.width / 2) + extents.x_bearing);
+        int y = h / 2 - ((extents.height / 2) + extents.y_bearing);
+
+        cairo_set_source_rgb(ctx_modifier, 250.0 / 255, 0, 0);
+        cairo_move_to(ctx_modifier, x, y);
+        cairo_show_text(ctx_modifier, modifier_string);
+        cairo_close_path(ctx_modifier);
+
+        if (xr_screens > 0) {
+            for (int screen = 0; screen < xr_screens; screen++) {
+                int x = xr_resolutions[screen].x + (xr_resolutions[screen].width / 2) - (w_scaled / 2);
+                int y = xr_resolutions[screen].y + (xr_resolutions[screen].height / 2) + h_scaled + 50 ;
+                cairo_set_source_surface(xcb_ctx, output_modifier, x, y);
+                cairo_rectangle(xcb_ctx, x, y, w_scaled, h_scaled);
+                cairo_fill(xcb_ctx);
+            }
+        } else {
+            int x = (last_resolution[0] / 2) - (w_scaled / 2);
+            int y = (last_resolution[1] / 2) + h_scaled + 100;
+            cairo_set_source_surface(xcb_ctx, output_modifier, x, y);
+            cairo_rectangle(xcb_ctx, x, y, w_scaled, h_scaled);
+            cairo_fill(xcb_ctx);
+        }
+        cairo_surface_destroy(output_modifier);
+        cairo_destroy(ctx_modifier);
+    }
+
+/* #ifdef LOGOUT_KEYBIND */
+    if (locked_time >= AUTHORIZED_LOCK_TIME) {
+        int h = 80;
+        int w = 450;
+        int h_scaled = ceil(scaling_factor * h);
+        int w_scaled = ceil(scaling_factor * w);
+        cairo_surface_t *output_indicator = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, w_scaled, h_scaled);
+        cairo_t *ctx_indicator = cairo_create(output_indicator);
+        cairo_scale(ctx_indicator, scaling_factor, scaling_factor);
+
+        /* Bakcground */
+        cairo_set_source_rgba(ctx_indicator, 250.0 / 255, 0, 0, 0.75);
+        cairo_rectangle(ctx_indicator, 0, 0, w, h);
+        cairo_stroke_preserve(ctx_indicator);
+        cairo_fill(ctx_indicator);
+
+        /* Text */
+        cairo_set_source_rgb(ctx_indicator, 1, 1, 1);
+        char *text = "Super + Shift + E to logout";
+
+        cairo_text_extents_t extents;
+        cairo_set_font_size(ctx_indicator, 32.0);
+
+        cairo_text_extents(ctx_indicator, text, &extents);
+        int x = w / 2 - ((extents.width / 2) + extents.x_bearing);
+        int y = h / 2 - ((extents.height / 2) + extents.y_bearing);
+
+        cairo_move_to(ctx_indicator, x, y);
+        cairo_show_text(ctx_indicator, text);
+        cairo_close_path(ctx_indicator);
+        if (xr_screens > 0) {
+            /* Composite the unlock indicator in the middle of each screen. */
+            for (int screen = 0; screen < xr_screens; screen++) {
+                int x = xr_resolutions[screen].x + (xr_resolutions[screen].width / 2) - (w_scaled / 2);
+                int y = xr_resolutions[screen].y + (xr_resolutions[screen].height) - h_scaled - 50;
+                cairo_set_source_surface(xcb_ctx, output_indicator, x, y);
+                cairo_rectangle(xcb_ctx, x, y, w_scaled, h_scaled);
+                cairo_fill(xcb_ctx);
+            }
+        } else {
+        /* We have no information about the screen sizes/positions, so we just
+         * place the unlock indicator in the middle of the X root window and
+         * hope for the best. */
+            int x = (last_resolution[0] / 2) - (w_scaled / 2);
+            int y = last_resolution[1] - h_scaled - 50 ;
+            cairo_set_source_surface(xcb_ctx, output_indicator, x, y);
+            cairo_rectangle(xcb_ctx, x, y, w_scaled, h_scaled);
+            cairo_fill(xcb_ctx);
+        }
+        cairo_surface_destroy(output_indicator);
+        cairo_destroy(ctx_indicator);
+    }
+/* #endif */
+
     cairo_surface_destroy(xcb_output);
     cairo_surface_destroy(output);
     cairo_destroy(ctx);
@@ -451,9 +593,24 @@ void redraw_screen(void) {
  *
  */
 void clear_indicator(void) {
-    if (input_position == 0) {
-        unlock_state = STATE_STARTED;
-    } else
-        unlock_state = STATE_KEY_PRESSED;
+    unlock_state = STATE_KEY_PRESSED;
+    redraw_screen();
+}
+
+/* Periodic redraw for clock */
+
+static void time_redraw_cb(struct ev_loop *loop, ev_periodic *w, int revents) {
     redraw_screen();
 }
+
+void start_time_redraw_tick(struct ev_loop* main_loop) {
+    if (time_redraw_tick) {
+        ev_periodic_set(time_redraw_tick, 1.0, 60., 0);
+        ev_periodic_again(main_loop, time_redraw_tick);
+    } else {
+        if (!(time_redraw_tick = calloc(sizeof(struct ev_periodic), 1)))
+            return;
+        ev_periodic_init(time_redraw_tick,time_redraw_cb, 1.0, 60., 0);
+        ev_periodic_start(main_loop, time_redraw_tick);
+    }
+}
